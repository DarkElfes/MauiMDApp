@using MauimdApp.Components.Layout.Body.NoteName;

@page "/"

@implements IDisposable


@if (NoteManager.SelectedNote is { } note)
{
    <MudStack Style="max-width: 1000px; margin: auto; padding: 20px;">

        <NoteName />

        @if (isReadMode)
        {
            <MudText>
                @MarkDownConvertor.Convert(note.Content)
            </MudText>
        }
        else
        {
            <MudStack Row StretchItems="StretchItems.All">
                <MudTextField T="string"
                              @bind-Text="note.Content"
                              Variant="Variant.Text"
                              AutoGrow />
            </MudStack>
        }
    </MudStack>

    <MudButton EndIcon="@(isReadMode? Icons.Material.Filled.Notes : Icons.Material.Filled.EditNote)"
               Class="mode-btn"
               Style="position: fixed; top: 20px; right: 20px;"
               IconSize="Size.Large"
               Color="Color.Primary"
               OnClick="() => isReadMode = !isReadMode">
        @(isReadMode ? "Read" : "Edit")
    </MudButton>
}

@code {
    [Inject] public required INoteManager NoteManager { get; set; }
    [Inject] public required IMDConvertor MarkDownConvertor { get; set; }
    [Inject] public required IJSRuntime JSRuntime { get; set; }

    private bool isReadMode = true;


    protected override void OnInitialized()
        => NoteManager.OnChangeSelectedNote += StateHasChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isReadMode)
        {
            await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
        }
    }

    public void Dispose()
        => NoteManager.OnChangeSelectedNote -= StateHasChanged;
}