@using Microsoft.UI.Windowing

@implements IAsyncDisposable


<MudTextField T="string"
              @ref="nameField"
              Text="@curName"
              TextChanged="HandleNameChanged"
              @onfocusout="HandleFocusOut"
              Style="color: var(--mud-palette-primary); font-weight: bold"
              Error="!string.IsNullOrWhiteSpace(errorMessage)"
              @bind-AdornmentText="errorMessage"
              Adornment="Adornment.End"
              AdornmentColor="Color.Error"
              Immediate
              Typo="Typo.h4" />


@code {
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required INoteManager NoteManager { get; set; }

    private string curName = null!;
    private string availableName = null!;
    private string errorMessage = string.Empty;

    private MudTextField<string> nameField = null!;
    private Window? window;


    protected override void OnInitialized()
    {
        // Adding handler for update values of input field when app window is deactivated
        window = (Window)MauiWinUIApplication.Current.Application.Windows.First();
        window.Deactivated += (_, _) =>
        {
            HandleFocusOut();
            StateHasChanged();
        };

        // Adding handler for update values of input field when selected note changed
        NoteManager.OnChangeSelectedNote += HandleSelectedNoteChanged;

        // Calling handler to set default values of input field
        HandleSelectedNoteChanged();
    }

    private void HandleSelectedNoteChanged()
    {
        curName = availableName = NoteManager.SelectedNote?.Name ?? string.Empty;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (NoteManager.IsNewNote)
        {
            await nameField.SelectAsync();
            NoteManager.IsNewNote = false;
        }
    }


    // Handlers of input component
    private void HandleNameChanged(string inputName)
    {
        curName = inputName;
        if (string.IsNullOrWhiteSpace(inputName))
        {
            errorMessage = "Note can't be without name. Please fill it.";
            return;
        }

        var newPath = GetNewPath(inputName);

        if (File.Exists(newPath) && NoteManager.SelectedNote!.FullPath != newPath)
        {
            errorMessage = "Note with this name already exist in current directory";
        }
        else
        {
            availableName = inputName;
            errorMessage = string.Empty;
        }
    }
    private void HandleFocusOut()
    {
        curName = availableName;
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(availableName) || NoteManager.SelectedNote!.Name == availableName)
        {
            return;
        }

        var newPath = GetNewPath(availableName);
        var result = NoteManager.RenameSelectedNote(newPath);

        if (result.IsSuccess)
            Snackbar.Add("Note successfully renamed", Severity.Success);
        else
            Snackbar.Add($"An error occurred while trying rename note: {result.Errors.First().Message}", Severity.Error);
    }

    // Get new path for note
    private string GetNewPath(string newName)
    {
        var dirPath = Path.GetDirectoryName(NoteManager.SelectedNote!.FullPath);
        if (string.IsNullOrWhiteSpace(dirPath))
        {
            throw new ArgumentException();
        }

        return Path.Combine(dirPath, $"{newName}.md");
    }


    public async ValueTask DisposeAsync()
    {
        NoteManager.OnChangeSelectedNote -= HandleSelectedNoteChanged;
        if (window != null)
        {
            window.Deactivated += (_, _) =>
            {
                HandleFocusOut();
                StateHasChanged();
            };
        }

        await nameField.DisposeAsync();
        Snackbar.Dispose();
    }
}